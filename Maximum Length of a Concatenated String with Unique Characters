You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.
Return the maximum possible length of s.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.

----------------------------------------------------USING RECURSION------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
bool check(string s1,string s2)
{
	int fr[26]={0};
	string s3=s1+s2;
	for(int i=0;i<s3.size();i++)
	{
		fr[s3[i]-'a']++;
	}
	for(int i=0;i<26;i++)
	{
		if(fr[i]>1)
		return false;
	}
	return true;
}
int len=0;
void F(int ind, string ss, vector<string> &arr)
{
	if(ind==arr.size())
	{
		//cout<<ss<<"\n";                             uniq un ique iq ue
		if(ss.size()>len)
		len=ss.size();
		return;
	}
  
	//For pick 
	if(check(ss,arr[ind]))
		F(ind+1,ss+arr[ind],arr);
    
	//For Non-Pick
	F(ind+1,ss,arr);
}
int main()
{
		int n;                                      // 3
		cin>>n;
		vector<string>arr;
		for(int i=0;i<n;i++)
		{
			string x;                                //un iq ue
			cin>>x;
			arr.push_back(x);
		}
		F(0,"",arr);
		cout<<len;
}
